-- Table pour sauvegarder les réglages
local settings = {
    rage_enable = false,
    rage_fov = 90,
    visuals_enable = false,
    visuals_chams = false,
    aimbot_enable = false,
    aimbot_smoothness = 1,
    misc_bunnyhop = false,
    viewmodel_x = 0,
    viewmodel_y = 0,
    viewmodel_z = 0,
    netlogger_enable = false,
    netlogger_verbose = false
}

-- Fonction pour charger les réglages
local function LoadSettings()
    -- Charger les réglages sauvegardés ici (si nécessaire)
end

-- Fonction pour sauvegarder les réglages
local function SaveSettings()
    -- Sauvegarder les réglages ici (si nécessaire)
end

-- Variable pour éviter les duplications
local menuOpen = false

-- Fonction Bunny Hop
hook.Add("CreateMove", "BunnyHop", function(cmd)
    if settings.misc_bunnyhop and LocalPlayer():IsOnGround() and cmd:KeyDown(IN_JUMP) then
        cmd:SetButtons(bit.bor(cmd:GetButtons(), IN_JUMP))
    end
end)

-- Fonction pour créer ou fermer le menu
local function ToggleRageMenu()
    if menuOpen then
        -- Si le menu est ouvert, on le ferme
        if IsValid(RageMenuFrame) then
            RageMenuFrame:Close()
        end
        menuOpen = false
    else
        -- Si le menu n'est pas ouvert, on le crée
        menuOpen = true

        -- Cadre principal
        RageMenuFrame = vgui.Create("DFrame")
        RageMenuFrame:SetTitle("Rage Menu")
        RageMenuFrame:SetSize(600, 500)
        RageMenuFrame:Center()
        RageMenuFrame:MakePopup()
        RageMenuFrame.Paint = function(self, w, h)
            draw.RoundedBox(8, 0, 0, w, h, Color(40, 40, 40, 255)) -- Fond principal
            draw.RoundedBox(8, 0, 0, w, 25, Color(30, 150, 200, 255)) -- Barre de titre
        end

        RageMenuFrame.OnClose = function()
            menuOpen = false -- Met à jour l'état du menu
        end

        -- Panneau pour les catégories et options
        local categoryTabs = vgui.Create("DPropertySheet", RageMenuFrame)
        categoryTabs:Dock(FILL)

        -- Fonction pour ajouter une case avec des sous-settings
        local function AddCheckboxWithSubSettings(parent, label, settingKey, subSettings)
            local panel = vgui.Create("DPanel", parent)
            panel:SetTall(60)
            panel:Dock(TOP)
            panel:DockMargin(5, 5, 5, 5)
            panel.Paint = function(self, w, h)
                draw.RoundedBox(4, 0, 0, w, h, Color(50, 50, 50, 255)) -- Fond des cases
            end

            -- Case à cocher principale
            local checkbox = vgui.Create("DCheckBoxLabel", panel)
            checkbox:SetText(label)
            checkbox:SetPos(10, 10)
            checkbox:SetValue(settings[settingKey] and 1 or 0)
            checkbox:SizeToContents()
            checkbox.OnChange = function(_, val)
                settings[settingKey] = val
                SaveSettings()

                -- Afficher ou masquer les sous-settings
                for _, subSetting in ipairs(subSettings) do
                    subSetting:SetVisible(val)
                end
            end

            -- Sous-settings
            local yOffset = 10
            for _, subSettingCreator in ipairs(subSettings) do
                local subSetting = subSettingCreator(panel, 200, yOffset)
                subSetting:SetVisible(settings[settingKey]) -- Visible si la case est cochée
                yOffset = yOffset + 40
            end
        end

        -- Fonction pour créer un slider
        local function CreateSlider(parent, x, y, label, settingKey, min, max, decimals)
            local slider = vgui.Create("DNumSlider", parent)
            slider:SetText(label)
            slider:SetPos(x, y)
            slider:SetSize(380, 40)
            slider:SetMin(min)
            slider:SetMax(max)
            slider:SetDecimals(decimals)
            slider:SetValue(settings[settingKey])
            slider.OnValueChanged = function(_, value)
                settings[settingKey] = value
                SaveSettings()
            end
            return slider
        end

        -- CATEGORIE RAGE
        local ragePanel = vgui.Create("DPanel", categoryTabs)
        ragePanel:Dock(FILL)
        ragePanel.Paint = function(self, w, h)
            draw.RoundedBox(0, 0, 0, w, h, Color(30, 30, 30, 255))
        end

        AddCheckboxWithSubSettings(ragePanel, "Enable Rage Mode", "rage_enable", {
            function(parent, x, y) return CreateSlider(parent, x, y, "Rage FOV", "rage_fov", 0, 180, 0) end
        })

        -- CATEGORIE VISUALS
        local visualsPanel = vgui.Create("DPanel", categoryTabs)
        visualsPanel:Dock(FILL)
        visualsPanel.Paint = function(self, w, h)
            draw.RoundedBox(0, 0, 0, w, h, Color(30, 30, 30, 255))
        end

        AddCheckboxWithSubSettings(visualsPanel, "Enable Visuals", "visuals_enable", {
            function(parent, x, y) return CreateSlider(parent, x, y, "Chams Intensity", "visuals_chams", 0, 100, 0) end
        })

        -- CATEGORIE AIMBOT
        local aimbotPanel = vgui.Create("DPanel", categoryTabs)
        aimbotPanel:Dock(FILL)
        aimbotPanel.Paint = function(self, w, h)
            draw.RoundedBox(0, 0, 0, w, h, Color(30, 30, 30, 255))
        end

        AddCheckboxWithSubSettings(aimbotPanel, "Enable Aimbot", "aimbot_enable", {
            function(parent, x, y) return CreateSlider(parent, x, y, "Aimbot Smoothness", "aimbot_smoothness", 1, 20, 1) end
        })

        -- CATEGORIE MISC
        local miscPanel = vgui.Create("DPanel", categoryTabs)
        miscPanel:Dock(FILL)
        miscPanel.Paint = function(self, w, h)
            draw.RoundedBox(0, 0, 0, w, h, Color(30, 30, 30, 255))
        end

        AddCheckboxWithSubSettings(miscPanel, "Enable Bunny Hop", "misc_bunnyhop", {
            function(parent, x, y) return CreateSlider(parent, x, y, "Hop Speed", "misc_bunnyhop_speed", 1, 10, 1) end
        })

        -- CATEGORIE VIEWMODEL
        local viewmodelPanel = vgui.Create("DPanel", categoryTabs)
        viewmodelPanel:Dock(FILL)
        viewmodelPanel.Paint = function(self, w, h)
            draw.RoundedBox(0, 0, 0, w, h, Color(30, 30, 30, 255))
        end

        CreateSlider(viewmodelPanel, 10, 10, "Viewmodel X", "viewmodel_x", -20, 20, 1)
        CreateSlider(viewmodelPanel, 10, 60, "Viewmodel Y", "viewmodel_y", -20, 20, 1)
        CreateSlider(viewmodelPanel, 10, 110, "Viewmodel Z", "viewmodel_z", -20, 20, 1)

        -- Ajout des catégories
        categoryTabs:AddSheet("Rage", ragePanel, "icon16/bomb.png")
        categoryTabs:AddSheet("Visuals", visualsPanel, "icon16/eye.png")
        categoryTabs:AddSheet("Aimbot", aimbotPanel, "icon16/gun.png")
        categoryTabs:AddSheet("Misc", miscPanel, "icon16/cog.png")
        categoryTabs:AddSheet("Viewmodel", viewmodelPanel, "icon16/wrench.png")
    end
end

-- Anti-spam pour la touche Insert
local canToggleMenu = true
local toggleCooldown = 0.3 -- Temps en secondes avant de pouvoir réappuyer

-- Hook pour ouvrir/fermer le menu avec la touche Insert
hook.Add("Think", "ToggleRageMenuKey", function()
    if input.IsKeyDown(KEY_INSERT) and canToggleMenu then
        canToggleMenu = false
        ToggleRageMenu()
        timer.Simple(toggleCooldown, function() canToggleMenu = true end)
    end
end)
